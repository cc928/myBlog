<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-12-26T23:37:29+08:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">raft cluster membership change</title><link href="/2020/12/26/raft-cluster_membership_chang.html" rel="alternate" type="text/html" title="raft cluster membership change" /><published>2020-12-26T00:00:00+08:00</published><updated>2020-12-26T00:00:00+08:00</updated><id>/2020/12/26/raft-cluster_membership_chang</id><content type="html" xml:base="/2020/12/26/raft-cluster_membership_chang.html">&lt;p&gt;读论文《In Search of an 》的时候，对这一块感觉描述的不清楚。对于什么时候进入joint consensus，什么时候受Joint consensus 条件的约束（两派协商达成共识）都感觉挺模糊的。现在总结一下自己的思路。&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;raft集群的成员变量可能会发生变更，由于每个节点都是根据本地的config文件来识别集群中的节点的，所以，对于集群变更我们需要更新config文件；进一步，文件下发的时间节点不一致，我们没有办法保证下发新config操作的原子性（除非 集群暂时下线），所以raft想到了2阶段的方式（2阶段的方式很多）：
1，joint consensus
2，new config&lt;/p&gt;

&lt;h1 id=&quot;步骤&quot;&gt;步骤：&lt;/h1&gt;
&lt;p&gt;1，(阶段1：leader创建新的config Cold-&amp;gt;new) leader 节点收到请求要更新config，leader节点会创建Cold-new config log entry，然后把这个log如同其他普通log一样下发给其他节点（如果这是一个扩容的情况， 当然也会下发给新的节点）&lt;/p&gt;

&lt;p&gt;2, (阶段2：还没有达到两派的绝大多数)（我认为，此刻就进入了joint consensues 阶段了，而不是等到他提交后才算，所以此时受两派共识规则的限制）那么收到log请求的其他follower 会立刻使用这个新的配置（如：集群新来了2个节点，从3节点变为5节点）。&lt;/p&gt;

&lt;p&gt;3, (阶段3：已经达到了两派的绝大多数）当leader收到了来自2个部分（原来的老集群，新集群）的绝大多数ack，表示说自己收到了Cold-&amp;gt;new config了，那么leader 才会提交这条log。此时，我们可以想象在老的集群里，绝大多数人也认识到了集群的变更，所以此时即便发生了分区，也不会在老集群里产生leader。&lt;/p&gt;

&lt;p&gt;4, (阶段4：leader创建新的config Cnew）那么此时怎么达到共识呢？我认为:
对于收到了new的config的节点，则直接使用new的配置来确保共识。
对于old-&amp;gt;config的节点，则直接使用new的配置来确保共识（而不受两派的约束）
对于old的节点还是使用old的配置来确保共识。&lt;/p&gt;

&lt;p&gt;5，（阶段5：leader 提交new config: Cnew）当绝大多数的节点（不区分两派了）都收到了Cnew, leader 则commit&lt;/p&gt;

&lt;h1 id=&quot;注意&quot;&gt;注意&lt;/h1&gt;
&lt;p&gt;对于joint consensus，我们要注意它的rule
1，无论是新老配置的节点，都还是会收到Log replication的
2，所有server都有机会成为leader
3，共识（选举或者commit log）一定是来自两派的绝大多数投票才可以通过。这里的两派是新，旧config 两派。
如：
旧：1，2，3 三个节点
新：1，2，3，4，5 五个节点
那么3的要求就是旧里面有至少2个同一，新里面有至少3个同意。&lt;/p&gt;

&lt;h1 id=&quot;异常情况分析&quot;&gt;异常情况分析&lt;/h1&gt;
&lt;p&gt;在上述步骤中的任意阶段都有可能发生分区，或者leader宕机等情况。我们来一一分析&lt;/p&gt;
&lt;h2 id=&quot;1异常发生在阶段1和2&quot;&gt;1，异常发生在阶段1和2&lt;/h2&gt;
&lt;h3 id=&quot;分区异常&quot;&gt;分区异常&lt;/h3&gt;
&lt;p&gt;此时，有部分节点收到了Cold-&amp;gt;new 节点，举一个极端的例子
旧：1，2，3
新：1，2，3，4，5
leader：3
分区1：1，2         (未收到Cold-&amp;gt;new)   ===&amp;gt; 会产生leader
分区2：3，4，5 （收到了Cold-&amp;gt;new）===&amp;gt; 不会产生leader ，或者说existed leader 无法工作吧（因为需要两派的共识）&lt;/p&gt;

&lt;h3 id=&quot;leader宕机&quot;&gt;leader宕机&lt;/h3&gt;
&lt;p&gt;旧：1，2，3
新：1，2，3，4，5，6，7 （加入了更多的节点）
leader：3
1，2：  (未收到Cold-&amp;gt;new) &lt;br /&gt;
3，4，5，6，7 （收到 Cold-&amp;gt;new）&lt;/p&gt;

&lt;p&gt;可以想象，新leader可能会出现在old 集群里（如上栗的1号节点收到了2号节点的投票，则成为leader）；
而新加入的节点想要成为leader 也不是不可以，如果只是收到了来自己4，5，6，7号节点的投票，虽然看上去是占了整个集群的绝大多数，但是破坏了两派的共识，所以不可以，所以如果4号节点要成为leader，还必须收到来自1,2号节点的任意一票&lt;/p&gt;

&lt;h2 id=&quot;2异常发生在阶段3&quot;&gt;2，异常发生在阶段3&lt;/h2&gt;
&lt;p&gt;阶段3，可以理解为两派里的绝大多数节点已经收到了Cold-&amp;gt;new 的配置。&lt;/p&gt;

&lt;h3 id=&quot;分区异常-1&quot;&gt;分区异常&lt;/h3&gt;
&lt;p&gt;此时，有部分节点收到了Cold-&amp;gt;new 节点，举一个极端的例子
旧：1，2，3
新：1，2，3，4，5
leader：3&lt;/p&gt;

&lt;p&gt;分区1：1，2         (1号节点收到Cold-&amp;gt;new)&lt;br /&gt;
 ===&amp;gt; 2号不可能成为leader，因为1号比他更新，1号不可能成为leader，因为他需要至少3票。&lt;/p&gt;

&lt;p&gt;分区2：3，4，5 （收到了Cold-&amp;gt;new）
===&amp;gt; 可以产生leader，因为可以收到至少3票的投票&lt;/p&gt;

&lt;h3 id=&quot;leader宕机-1&quot;&gt;leader宕机&lt;/h3&gt;

&lt;p&gt;旧：1，2，3
新：1，2，3，4，5，6，7 （加入了更多的节点）
leader：3
1：  (收到Cold-&amp;gt;new) &lt;br /&gt;
2：  (未收到Cold-&amp;gt;new) &lt;br /&gt;
4，5，6，7：  (收到Cold-&amp;gt;new)&lt;/p&gt;

&lt;p&gt;可以想象，leader不能能出现在2号old 配置节点上，因为不会有人投给他。
只可能出现在old-&amp;gt;new 配置的节点上。并且要获得至少4票的选票。&lt;/p&gt;</content><author><name></name></author><summary type="html">读论文《In Search of an 》的时候，对这一块感觉描述的不清楚。对于什么时候进入joint consensus，什么时候受Joint consensus 条件的约束（两派协商达成共识）都感觉挺模糊的。现在总结一下自己的思路。</summary></entry></feed>